name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0, 1.0.1, 2.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # For creating releases and tags
      pull-requests: write # For creating PRs
      packages: write      # For npm publishing
      actions: read        # For workflow operations

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Update version
        id: version
        run: |
          VERSION_INPUT="${{ github.event.inputs.version }}"

          # Validate version format
          if ! [[ "$VERSION_INPUT" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format. Please use semantic versioning (e.g., 1.0.0)"
            exit 1
          fi

          # Update package.json version
          npm version $VERSION_INPUT --no-git-tag-version

          echo "new_version=$VERSION_INPUT" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          BRANCH_NAME="release-v${{ steps.version.outputs.new_version }}"
          git checkout -b $BRANCH_NAME
          git add package.json package-lock.json
          git commit -m "chore: release v${{ steps.version.outputs.new_version }}"
          git push origin $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${{ steps.version.outputs.new_version }}`,
              body: `## ðŸš€ Automated Release PR\n\nThis PR updates the version to **v${{ steps.version.outputs.new_version }}** for npm release.\n\n### Changes:\n- âœ… Updated package.json version\n- âœ… Updated package-lock.json\n\n### Automated Actions:\nThis PR will be automatically:\n- Merged to main\n- Tagged as v${{ steps.version.outputs.new_version }}\n- Published to npm registry\n- Released on GitHub\n\n*This is an automated release process initiated by GitHub Actions.*`,
              head: '${{ env.branch_name }}',
              base: 'main'
            });

            console.log(`Created PR #${pr.data.number}`);
            return pr.data.number;

      - name: Auto-merge PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.create-pr.outputs.result }};

            // Enable auto-merge
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'squash'
            });

            console.log(`Merged PR #${prNumber}`);

      - name: Wait for merge and checkout main
        run: |
          # Wait a moment for the merge to complete
          sleep 5

          # Fetch latest main with the merged changes
          git fetch origin main
          git checkout main
          git reset --hard origin/main

      - name: Create and push tag
        run: |
          git tag v${{ steps.version.outputs.new_version }}
          git push origin v${{ steps.version.outputs.new_version }}

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## ðŸš€ Release v${{ steps.version.outputs.new_version }}

            ### âœ… Published to npm Registry

            Install with:
            ```bash
            npm install @marqeta/marqeta-mcp@${{ steps.version.outputs.new_version }}
            ```

            ### ðŸ”— Links
            - [npm Package](https://www.npmjs.com/package/@marqeta/marqeta-mcp/v/${{ steps.version.outputs.new_version }})
            - [Documentation](https://github.com/marqeta/marqeta-mcp#readme)
          draft: false
          prerelease: false
